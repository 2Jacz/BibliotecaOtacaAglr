// <auto-generated />
using System;
using BibliotecaOtacaAglr.Data.DataBaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BibliotecaOtacaAglr.Migrations
{
    [DbContext(typeof(BibliotecaOtakaBDContext))]
    partial class BibliotecaOtakaBDContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.Anime_Episodios.Entity.Anime_Episodio", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre_archivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Numero_capitulo")
                        .HasColumnType("float");

                    b.Property<string>("Titulo_capitulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AnimeId");

                    b.ToTable("Anime_Episodios");
                });

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.Anime_Episodios_Servidores.Anime_Episodio_Servidor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Anime_EpisodioId")
                        .HasColumnType("int");

                    b.Property<string>("Enlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Anime_EpisodioId");

                    b.ToTable("Anime_Episodios_Servidores");
                });

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.Animes.Entity.Anime", b =>
                {
                    b.Property<int>("AnimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero_episodios")
                        .HasColumnType("int");

                    b.Property<byte[]>("Portada")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("AnimeId");

                    b.ToTable("Animes");
                });

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.Animes.Entity.Anime_Genero", b =>
                {
                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int>("GeneroId")
                        .HasColumnType("int");

                    b.HasKey("AnimeId", "GeneroId");

                    b.HasIndex("GeneroId");

                    b.ToTable("Anime_Genero");
                });

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.Favorito.Entity.Anime_Favorito", b =>
                {
                    b.Property<int>("AnimeID")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Favorito")
                        .HasColumnType("bit");

                    b.HasKey("AnimeID", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Anime_Favorito");
                });

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.Favorito.Entity.Manga_Favorito", b =>
                {
                    b.Property<int>("MangaID")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Favorito")
                        .HasColumnType("bit");

                    b.HasKey("MangaID", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Manga_Favorito");
                });

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.Generos.Entity.Genero", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Generos");
                });

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.Manga_Capitulo_Paginas.Entity.Manga_Capitulo_Pagina", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CapituloId")
                        .HasColumnType("int");

                    b.Property<string>("Numero_pagina")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Pagina")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ID");

                    b.HasIndex("CapituloId");

                    b.ToTable("Manga_Capitulo_Paginas");
                });

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.Manga_Capitulos.Entity.Manga_Capitulo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Num_capitulo")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("MangaId");

                    b.ToTable("Manga_Capitulos");
                });

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.Mangas.Entity.Manga", b =>
                {
                    b.Property<int>("MangaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Portada")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("MangaId");

                    b.ToTable("Mangas");
                });

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.Mangas.Entity.Manga_Genero", b =>
                {
                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<int>("GeneroId")
                        .HasColumnType("int");

                    b.HasKey("MangaId", "GeneroId");

                    b.HasIndex("GeneroId");

                    b.ToTable("Manga_Genero");
                });

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.Permisos.Entity.Permiso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permisos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Tipo = "Administrador",
                            Valor = "Permisos de administrador"
                        },
                        new
                        {
                            Id = 2,
                            Tipo = "Crear IUsuario",
                            Valor = "Puede crear usuarios"
                        },
                        new
                        {
                            Id = 3,
                            Tipo = "Borrar IUsuario",
                            Valor = "Puede borrar usuarios"
                        },
                        new
                        {
                            Id = 4,
                            Tipo = "Gestionar Roles",
                            Valor = "Puede gestionar roles"
                        },
                        new
                        {
                            Id = 5,
                            Tipo = "Crear Generos",
                            Valor = "Puede crear generos"
                        },
                        new
                        {
                            Id = 6,
                            Tipo = "Editar Generos",
                            Valor = "Puede editar generos"
                        },
                        new
                        {
                            Id = 7,
                            Tipo = "Borrar Generos",
                            Valor = "Puede borrar generos"
                        },
                        new
                        {
                            Id = 8,
                            Tipo = "Crear Anime",
                            Valor = "Puede crear animes"
                        },
                        new
                        {
                            Id = 9,
                            Tipo = "Editar Anime",
                            Valor = "Puede editar animes"
                        },
                        new
                        {
                            Id = 10,
                            Tipo = "Borrar Anime",
                            Valor = "Puede borrar animes"
                        },
                        new
                        {
                            Id = 11,
                            Tipo = "Crear Anime Capitulo",
                            Valor = "Puede crear capitulos en animes"
                        },
                        new
                        {
                            Id = 12,
                            Tipo = "Editar Anime Capitulo",
                            Valor = "Puede editar capitulos en animes"
                        },
                        new
                        {
                            Id = 13,
                            Tipo = "Borrar Anime Capitulo",
                            Valor = "Puede borrar capitulos en animes"
                        },
                        new
                        {
                            Id = 14,
                            Tipo = "Crear Manga",
                            Valor = "Puede crear mangas"
                        },
                        new
                        {
                            Id = 15,
                            Tipo = "Editar Manga",
                            Valor = "Puede editar mangas"
                        },
                        new
                        {
                            Id = 16,
                            Tipo = "Borrar Manga",
                            Valor = "Puede borrar mangas"
                        },
                        new
                        {
                            Id = 17,
                            Tipo = "Crear Manga Capitulos",
                            Valor = "Puede crear capitulos en mangas"
                        },
                        new
                        {
                            Id = 18,
                            Tipo = "Editar Manga Capitulos",
                            Valor = "Puede editar capitulos en mangas"
                        },
                        new
                        {
                            Id = 19,
                            Tipo = "Borrar Manga Capitulos",
                            Valor = "Puede borrar capitulos en mangas"
                        },
                        new
                        {
                            Id = 20,
                            Tipo = "Crear Manga Capitulos Paginas",
                            Valor = "Puede crear paginas en capitulos en mangas"
                        },
                        new
                        {
                            Id = 21,
                            Tipo = "Editar Manga Capitulos Paginas",
                            Valor = "Puede editar paginas en mangas"
                        },
                        new
                        {
                            Id = 22,
                            Tipo = "Borrar Manga Capitulos Paginas",
                            Valor = "Puede borrar paginas en mangas"
                        });
                });

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.UsuarioTokens.UsuarioToken", b =>
                {
                    b.Property<int>("TokenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Fecha_Creacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Fecha_Expiracion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Valido")
                        .HasColumnType("bit");

                    b.HasKey("TokenID");

                    b.ToTable("UsuariosTokens");
                });

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.Usuarios.Entity.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "f5b93248-10dd-40fb-a317-12b24d190a3c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b47a7e17-149f-4b1e-b960-3190e6e2da08",
                            Email = "example@example.net",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE@EXAMPLE.NET",
                            NormalizedUserName = "MAD0",
                            PasswordHash = "AQAAAAEAACcQAAAAELGRyCmF14Zt1EkGIv0aWcTuxHmXWBDmBX/nNJLUuT6GW+2UH/yJy1+irCLtjzD9qw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76d7c417-6c39-45db-8963-304f80f361e0",
                            TwoFactorEnabled = false,
                            UserName = "MAD0"
                        },
                        new
                        {
                            Id = "6d435a04-1bb0-4c7e-874d-edb7d25f41fc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8afaac8-3367-4ee9-97da-3166ee989d53",
                            Email = "Kotori@onee.chan",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KOTORI@ONEE.CHAN",
                            NormalizedUserName = "KOTORI",
                            PasswordHash = "AQAAAAEAACcQAAAAEKe5/X/CJ6VndpKHpX+9wI/7WL0irVnPUXLuKoXtYwP4v5QAElAYHyJmGak1JIHuZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "59e210b1-d92e-45a9-8cd4-c7837a01e691",
                            TwoFactorEnabled = false,
                            UserName = "Kotori"
                        },
                        new
                        {
                            Id = "0d304ebd-9b85-49bb-83ea-3313f534a865",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a6614b1-a9f3-434d-80cf-f3f616b5893e",
                            Email = "Kaoru@onee.sama",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KAORU@ONEE.SAMA",
                            NormalizedUserName = "KAORU",
                            PasswordHash = "AQAAAAEAACcQAAAAECm4SAMFVpcEkBM2uJc/jJfzqR07XumO38K49n2HYMLUbV0ISo4sHn0uwvdZIJ5eqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e12009b-3b10-4a73-ba28-57ae3323ad5f",
                            TwoFactorEnabled = false,
                            UserName = "Kaoru"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "8e8ddcce-fe93-4563-be09-de9620c7e5e3",
                            ConcurrencyStamp = "532ed60c-aaf4-43e3-b3e5-dfbe439e7742",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "0224e393-55a4-4211-97d4-a4b9f5052609",
                            ConcurrencyStamp = "ebe41fd7-0f48-4838-9b89-cc530c679193",
                            Name = "Uploader",
                            NormalizedName = "UPLOADER"
                        },
                        new
                        {
                            Id = "fbe82cec-a56e-40c3-afb1-60b8bd38b611",
                            ConcurrencyStamp = "1552672b-1ba3-4122-8eb4-b4a0ad09689a",
                            Name = "Usuario",
                            NormalizedName = "USUARIO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Email",
                            ClaimValue = "example@example.net",
                            UserId = "f5b93248-10dd-40fb-a317-12b24d190a3c"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Email",
                            ClaimValue = "Kaoru@onee.sama",
                            UserId = "0d304ebd-9b85-49bb-83ea-3313f534a865"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Email",
                            ClaimValue = "Kotori@onee.chan",
                            UserId = "6d435a04-1bb0-4c7e-874d-edb7d25f41fc"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "f5b93248-10dd-40fb-a317-12b24d190a3c",
                            RoleId = "8e8ddcce-fe93-4563-be09-de9620c7e5e3"
                        },
                        new
                        {
                            UserId = "6d435a04-1bb0-4c7e-874d-edb7d25f41fc",
                            RoleId = "0224e393-55a4-4211-97d4-a4b9f5052609"
                        },
                        new
                        {
                            UserId = "0d304ebd-9b85-49bb-83ea-3313f534a865",
                            RoleId = "fbe82cec-a56e-40c3-afb1-60b8bd38b611"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.Anime_Episodios.Entity.Anime_Episodio", b =>
                {
                    b.HasOne("BibliotecaOtacaAglr.Models.Animes.Entity.Anime", "Anime")
                        .WithMany("Episodios")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.Anime_Episodios_Servidores.Anime_Episodio_Servidor", b =>
                {
                    b.HasOne("BibliotecaOtacaAglr.Models.Anime_Episodios.Entity.Anime_Episodio", "Anime_Episodio")
                        .WithMany("UrlServidores")
                        .HasForeignKey("Anime_EpisodioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.Animes.Entity.Anime_Genero", b =>
                {
                    b.HasOne("BibliotecaOtacaAglr.Models.Animes.Entity.Anime", "Anime")
                        .WithMany("Generos")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BibliotecaOtacaAglr.Models.Generos.Entity.Genero", "Genero")
                        .WithMany("Animes")
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.Favorito.Entity.Anime_Favorito", b =>
                {
                    b.HasOne("BibliotecaOtacaAglr.Models.Animes.Entity.Anime", "Anime")
                        .WithMany()
                        .HasForeignKey("AnimeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaOtacaAglr.Models.Usuarios.Entity.Usuario", "Usuario")
                        .WithMany("Animes_Favoritos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.Favorito.Entity.Manga_Favorito", b =>
                {
                    b.HasOne("BibliotecaOtacaAglr.Models.Mangas.Entity.Manga", "Manga")
                        .WithMany()
                        .HasForeignKey("MangaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaOtacaAglr.Models.Usuarios.Entity.Usuario", "Usuario")
                        .WithMany("Mangas_Favoritos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.Manga_Capitulo_Paginas.Entity.Manga_Capitulo_Pagina", b =>
                {
                    b.HasOne("BibliotecaOtacaAglr.Models.Manga_Capitulos.Entity.Manga_Capitulo", "Capitulo")
                        .WithMany("Paginas")
                        .HasForeignKey("CapituloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.Manga_Capitulos.Entity.Manga_Capitulo", b =>
                {
                    b.HasOne("BibliotecaOtacaAglr.Models.Mangas.Entity.Manga", "Manga")
                        .WithMany("Capitulos")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BibliotecaOtacaAglr.Models.Mangas.Entity.Manga_Genero", b =>
                {
                    b.HasOne("BibliotecaOtacaAglr.Models.Generos.Entity.Genero", "Genero")
                        .WithMany("Mangas")
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BibliotecaOtacaAglr.Models.Mangas.Entity.Manga", "Manga")
                        .WithMany("Generos")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BibliotecaOtacaAglr.Models.Usuarios.Entity.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BibliotecaOtacaAglr.Models.Usuarios.Entity.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BibliotecaOtacaAglr.Models.Usuarios.Entity.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BibliotecaOtacaAglr.Models.Usuarios.Entity.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
